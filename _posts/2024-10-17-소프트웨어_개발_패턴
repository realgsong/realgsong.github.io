---
layout: post
title: '소프트웨어 개발 패턴'
categories: dev
image: /assets/article_images/office.jpg
comments: true
---
GoF 의 디자인 패턴이 코드 상의 반복되는 문제해결법을 다루고 있는 책으로 관련 도서 중 가장 유명하다. 코딩 중에 자주 만나게 되는 설계 문제를 하나의 패턴으로 정의해서 해당 패턴에 대한 솔루션을 기술해 둔 것이다.

나도 이와 유사한 작업을 한번 해볼까 하는데, 이른바 "소프트웨어 개발 패턴" 이다. 코드 단위를 넘어서서 고객, 팀원, 일정 관리 등 소프트웨어 개발 전반에서 발생하는 문제들 중 코드 밖에서 발생하는 일들을 패턴으로 기록해 보려고 한다. 

이 거창해 보이는 작업의 이유는 사실 무척 사소한 것인데, 회사 생활에서 받는 스트레스를 조금 더 건강한 형태로 풀어두기 위한 개인적인 필요 때문이다. 과거 경험을 돌아봐도 소프트웨어 개발에서 나를 힘들게 했던 부분들은 코드 밖에서 발생한 경우가 더 많았던 것 같다. 코드의 문제는 푸는 즐거움이라도 있지만, 다른 일들은 푸는 과정이 그다지 즐겁지 않았고, 그와 유사한 문제가 반복적으로 나타나더라도 이전 해법에서 배워올 수 있는 것들이 명확하지 않았다.

코드 밖의 비정형화 영역에서 발생하는 문제를 문자를 통한 정형화된 형태로 기록하는 일이 쉽지 않다는 것을 알고 있다. 그러나 그럼에도 불구하고 반복되는 것처럼 느껴지는 문제들의 공통된 부분은 분명히 존재한다. 공통의 요소들만 검증된 방법으로 해결할 수 있다면, 나머지 부분은 다루는 것은 한결 더 쉬워질 것이다.

패턴 기술 형식은 패턴의 이름, 요약, 설명, 원인, 해결 의 5가지로 나눠서 정리해 보려고 한다. 해결 부분은 시간이 걸릴 수 있어서 패턴 작성 초안에서는 '시도' 로 변경해서 작성하고, 결과 검증 후 '해결' 로 변경해서 다시 기재하는 식으로 정리하면 될 것 같다. 마지막에 한 섹션을 더 두어 패턴 변경 이력을 정리해 두는 것도 좋을 것 같다.

일단은 작게 베이베스텝으로 시작해보자. 내 스트레스만 줄일 수 있어도 시도는 성공한 것이다.
